{"version":3,"sources":["components/CryptoTable/index.tsx","components/ConverterBlock/index.tsx","styles.ts","App.tsx","stores/converterStore.ts","stores/currenciesStore.ts","stores/index.ts","index.tsx"],"names":["CryptoTable","inject","observer","classes","currenciesStore","items","getItems","React","useEffect","fetchCoins","TableContainer","component","Paper","Table","className","table","aria-label","TableHead","TableRow","TableCell","align","TableBody","length","map","coin","key","name","currencyIcon","src","imageUrl","alt","fullName","price","volume24Hour","ConverterBlock","coins","paper","cryptoInputBox","FormControl","currencyInput","TextField","fullWidth","label","currencyType","InputLabel","id","Select","value","MenuItem","useStyles","makeStyles","theme","createStyles","root","padding","spacing","textAlign","color","palette","text","secondary","marginBottom","marginTop","minWidth","marginRight","width","height","borderRadius","App","Container","maxWidth","Grid","container","item","xs","ConverterStore","CurrenciesStore","this","observable","computed","action","axios","get","then","data","Data","CoinInfo","Name","FullName","ImageUrl","RAW","USD","PRICE","toFixed","parseInt","VOLUMEDAY","console","log","stores","converterStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3753537b.chunk.js","sourcesContent":["import TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\nimport {observer, inject} from 'mobx-react'\r\nimport {TCoin} from '../../types'\r\nimport CurrenciesStore from \"../../stores/currenciesStore\";\r\n\r\ntype ICryptoTable = {\r\n\r\n        classes:any;\r\n    currenciesStore?: CurrenciesStore;\r\n}\r\n// копанент инжектит саму стору подключает ее и обсервер получает пропс\r\nconst CryptoTable =  inject('currenciesStore')(\r\n    observer(({classes, currenciesStore}:ICryptoTable) => {\r\n            const items: TCoin[] = currenciesStore!.getItems || [];\r\n\r\n            React.useEffect(() => {\r\n\r\n               if(currenciesStore){\r\n                   currenciesStore.fetchCoins();\r\n               }\r\n\r\n            }, []);\r\n\r\n\r\n//подключаем компонент к хранилищу\r\n            return (\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.table} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell></TableCell>\r\n                                <TableCell align=\"left\">Name</TableCell>\r\n                                <TableCell align=\"left\">Fullname</TableCell>\r\n                                <TableCell align=\"left\">Price</TableCell>\r\n                                <TableCell align=\"left\">Volume day</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {!items.length\r\n                                ? 'Загрузка...'\r\n                                : items.map((coin) => (\r\n                                    <TableRow key={coin.name}>\r\n                                        <TableCell><img className={classes.currencyIcon} src={coin.imageUrl}\r\n                                                        alt=\"Coin icon\"/></TableCell>\r\n                                        <TableCell align=\"left\">{coin.name}</TableCell>\r\n                                        <TableCell align=\"left\">{coin.fullName}</TableCell>\r\n                                        <TableCell align=\"left\">$ {coin.price}</TableCell>\r\n                                        <TableCell align=\"left\">${coin.volume24Hour}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            )\r\n        }\r\n    )\r\n);\r\n\r\n\r\nexport default CryptoTable;","import FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport React from \"react\";\r\nimport {TCoin} from \"../../types\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport CurrenciesStore from \"../../stores/currenciesStore\";\r\n\r\n\r\ntype IConverterBlock = {\r\n\r\n    classes: any;\r\n    currenciesStore?: CurrenciesStore;\r\n}\r\n\r\n\r\nconst ConverterBlock: React.FC<IConverterBlock> = inject('currenciesStore')(\r\n    observer(({classes, currenciesStore}) => {\r\n        const coins: string[] = currenciesStore!.getItems.map(coin => coin.name);//отображение валют в селекторе\r\n        return (\r\n\r\n\r\n            <Paper className={classes.paper}>\r\n                <div className={classes.cryptoInputBox}>\r\n                    <FormControl className={classes.currencyInput}>\r\n                        <TextField fullWidth label=\"Сумма\"/>\r\n                    </FormControl>\r\n\r\n                    <FormControl className={classes.currencyType}>\r\n\r\n                        <InputLabel id=\"demo-simple-select-helper-label\">Валюта</InputLabel>\r\n\r\n                        <Select id=\"demo-simple-select\" value={coins[0]}>\r\n                            {\r\n                                coins.map(name => <MenuItem value={name}>{name}</MenuItem>)\r\n                            }\r\n                        </Select>\r\n\r\n                    </FormControl>\r\n                </div>\r\n\r\n                <div className={classes.cryptoInputBox}>\r\n                    <FormControl className={classes.currencyInput}>\r\n                        <TextField fullWidth label=\"Сумма\"/>\r\n                    </FormControl>\r\n\r\n                    <FormControl className={classes.currencyType}>\r\n\r\n                        <InputLabel id=\"demo-simple-select-helper-label\">Валюта</InputLabel>\r\n\r\n                        <Select id=\"demo-simple-select\" value={coins[0]}>\r\n                            {\r\n                                coins.map(name => <MenuItem value={name}>{name}</MenuItem>)\r\n                            }\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n\r\n\r\n            </Paper>\r\n\r\n\r\n        )\r\n\r\n    }))\r\n\r\nexport default ConverterBlock;","import {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            padding: theme.spacing(10),\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n        cryptoInputBox: {\r\n            marginBottom: 20,\r\n            marginTop: 20,\r\n        },\r\n\r\n        currencyInput: {\r\n\r\n            minWidth: 'calc(70%-10px)',\r\n            marginRight: 10,\r\n        },\r\n        currencyType: {\r\n            minWidth: '30%',\r\n        },\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n        currencyIcon: {\r\n            width: 18,\r\n            height: 18,\r\n            borderRadius: 30,\r\n        }\r\n    }),\r\n);\r\n\r\n\r\nexport default useStyles;","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport {makeStyles, createStyles, Theme} from '@material-ui/core/styles';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport {TCoin} from './types'\nimport {CryptoTable, ConverterBlock} from './components'\nimport useStyles from './styles'\n\n\n// сначало\n\n// Tcoin - типы свойст\n//чтобы показывало ошибки, в массиве не может быть другого объекта кроме этого\n\n\nfunction App() {\n\n    const classes: any = useStyles(); //<> - какого типа будут ответы typescript\n    //allcoins должен быть только массивом  tcoin или null\n    //как только компонент отрендерется 1 раз будет выполнятся функция. Если ни 1 переменная не обновится то не будет выполнения функции\n    // React.useEffect(() => {\n    //\n    //     // axios\n    //     //     .get('https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD')\n    //     //     .then(({data}) => {\n    //     //         const coins: TCoin[] = data.Data.map((coin: any) => {\n    //     //\n    //     //             const obj: TCoin = {\n    //     //                 name: coin.CoinInfo.Name,\n    //     //                 fullName: coin.CoinInfo.FullName,\n    //     //                 imageUrl: `https://www.cryptocompare.com/${coin.CoinInfo.ImageUrl}`,\n    //     //                 price: coin.RAW.USD.PRICE.toFixed(3),\n    //     //                 volume24Hour: parseInt(coin.RAW.USD.VOLUMEDAY),\n    //     //\n    //     //             }; //преобразовываем все объекты\n    //     //             return obj;\n    //     //\n    //     //\n    //     //         });\n    //     //         setAllCoins(coins); //как только компанент отрендерется ты должен отправить гет запрос и вытащить инфу из ответа, из всего ответа вытащить DAta и передаем в coins, далее сохраняем коинс в переменной allcoins что все приложение знало какие данные мы получили потом производим ререндер\n    //     //         console.log(coins);\n    //     //\n    //     //     })\n    // }, [classes]);\n\n\n    return (\n        <Container maxWidth=\"lg\" className={classes.root}>\n\n\n            <Grid container spacing={3}>\n                <Grid item xs={8}>\n                    <CryptoTable classes={classes} />\n\n                </Grid>\n                <Grid item xs={4}>\n                    <ConverterBlock classes={classes}/>\n                </Grid>\n\n            </Grid>\n\n        </Container>\n\n    );\n}\n\nexport default App;\n","import {observable, computed, action} from 'mobx'\r\nimport {TCoin} from \"../types\";\r\n\r\nclass ConverterStore{\r\n\r\n\r\n\r\n}\r\n\r\nexport default ConverterStore;","\r\nimport axios from  'axios';\r\nimport {observable, computed, action} from 'mobx'\r\nimport {TCoin} from \"../types\";\r\n\r\nclass CurrenciesStore{\r\n\r\n    @observable private items: TCoin[] = [];\r\n\r\n\r\n    @computed\r\n    get getItems(){\r\n        return this.items;\r\n\r\n    }\r\n\r\n\r\n    @action\r\n    setItems =(items: TCoin[]): void =>{\r\n        this.items = items;\r\n    };  //получаем массив TCoin и эта функция ничего не возращает\r\n@action\r\n    fetchCoins =()=>{\r\n\r\n        axios\r\n                .get('https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD')\r\n                .then(({data}) => {\r\n                    const coins: TCoin[] = data.Data.map((coin: any) => {\r\n\r\n                        const obj: TCoin = {\r\n                            name: coin.CoinInfo.Name,\r\n                            fullName: coin.CoinInfo.FullName,\r\n                            imageUrl: `https://www.cryptocompare.com/${coin.CoinInfo.ImageUrl}`,\r\n                            price: coin.RAW.USD.PRICE.toFixed(3),\r\n                            volume24Hour: parseInt(coin.RAW.USD.VOLUMEDAY),\r\n\r\n                        }; //преобразовываем все объекты\r\n                        return obj;\r\n\r\n\r\n                    });\r\n                    this.items =  coins; //как только компанент отрендерется ты должен отправить гет запрос и вытащить инфу из ответа, из всего ответа вытащить DAta и передаем в coins, далее сохраняем коинс в переменной allcoins что все приложение знало какие данные мы получили потом производим ререндер\r\n                    console.log(coins);\r\n\r\n                });\r\n\r\n\r\n}\r\n}\r\n\r\nexport default CurrenciesStore;","import ConverterStore from './converterStore';\r\nimport CurrenciesStore from './currenciesStore';\r\n\r\nconst stores = {\r\n    converterStore: new ConverterStore(),\r\n    currenciesStore: new CurrenciesStore(),\r\n};\r\n\r\n\r\nexport default stores;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'mobx-react';\n\nimport stores from  './stores';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider {...stores} >\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}